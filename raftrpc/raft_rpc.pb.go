// Code generated by protoc-gen-go.
// source: raftrpc/raft_rpc.proto
// DO NOT EDIT!

/*
Package RaftRPC is a generated protocol buffer package.

It is generated from these files:
	raftrpc/raft_rpc.proto

It has these top-level messages:
	RPCMessage
	LogEntry
	AppendEntriesRequest
	AppendEntriesReply
	RequestVoteRequest
	RequestVoteReply
	InstallSnapshotRequest
	InstallSnapshotReply
*/
package RaftRPC

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RPCMessage struct {
	ServerId uint64 `protobuf:"varint,1,opt,name=server_id,json=serverId" json:"server_id,omitempty"`
	// Types that are valid to be assigned to Message:
	//	*RPCMessage_Aereq
	//	*RPCMessage_Aereply
	//	*RPCMessage_Rvreq
	//	*RPCMessage_Rvreply
	//	*RPCMessage_Isreq
	//	*RPCMessage_Isreply
	Message isRPCMessage_Message `protobuf_oneof:"message"`
}

func (m *RPCMessage) Reset()                    { *m = RPCMessage{} }
func (m *RPCMessage) String() string            { return proto.CompactTextString(m) }
func (*RPCMessage) ProtoMessage()               {}
func (*RPCMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isRPCMessage_Message interface {
	isRPCMessage_Message()
}

type RPCMessage_Aereq struct {
	Aereq *AppendEntriesRequest `protobuf:"bytes,2,opt,name=aereq,oneof"`
}
type RPCMessage_Aereply struct {
	Aereply *AppendEntriesReply `protobuf:"bytes,3,opt,name=aereply,oneof"`
}
type RPCMessage_Rvreq struct {
	Rvreq *RequestVoteRequest `protobuf:"bytes,4,opt,name=rvreq,oneof"`
}
type RPCMessage_Rvreply struct {
	Rvreply *RequestVoteReply `protobuf:"bytes,5,opt,name=rvreply,oneof"`
}
type RPCMessage_Isreq struct {
	Isreq *InstallSnapshotRequest `protobuf:"bytes,6,opt,name=isreq,oneof"`
}
type RPCMessage_Isreply struct {
	Isreply *InstallSnapshotReply `protobuf:"bytes,7,opt,name=isreply,oneof"`
}

func (*RPCMessage_Aereq) isRPCMessage_Message()   {}
func (*RPCMessage_Aereply) isRPCMessage_Message() {}
func (*RPCMessage_Rvreq) isRPCMessage_Message()   {}
func (*RPCMessage_Rvreply) isRPCMessage_Message() {}
func (*RPCMessage_Isreq) isRPCMessage_Message()   {}
func (*RPCMessage_Isreply) isRPCMessage_Message() {}

func (m *RPCMessage) GetMessage() isRPCMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *RPCMessage) GetAereq() *AppendEntriesRequest {
	if x, ok := m.GetMessage().(*RPCMessage_Aereq); ok {
		return x.Aereq
	}
	return nil
}

func (m *RPCMessage) GetAereply() *AppendEntriesReply {
	if x, ok := m.GetMessage().(*RPCMessage_Aereply); ok {
		return x.Aereply
	}
	return nil
}

func (m *RPCMessage) GetRvreq() *RequestVoteRequest {
	if x, ok := m.GetMessage().(*RPCMessage_Rvreq); ok {
		return x.Rvreq
	}
	return nil
}

func (m *RPCMessage) GetRvreply() *RequestVoteReply {
	if x, ok := m.GetMessage().(*RPCMessage_Rvreply); ok {
		return x.Rvreply
	}
	return nil
}

func (m *RPCMessage) GetIsreq() *InstallSnapshotRequest {
	if x, ok := m.GetMessage().(*RPCMessage_Isreq); ok {
		return x.Isreq
	}
	return nil
}

func (m *RPCMessage) GetIsreply() *InstallSnapshotReply {
	if x, ok := m.GetMessage().(*RPCMessage_Isreply); ok {
		return x.Isreply
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RPCMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RPCMessage_OneofMarshaler, _RPCMessage_OneofUnmarshaler, _RPCMessage_OneofSizer, []interface{}{
		(*RPCMessage_Aereq)(nil),
		(*RPCMessage_Aereply)(nil),
		(*RPCMessage_Rvreq)(nil),
		(*RPCMessage_Rvreply)(nil),
		(*RPCMessage_Isreq)(nil),
		(*RPCMessage_Isreply)(nil),
	}
}

func _RPCMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RPCMessage)
	// message
	switch x := m.Message.(type) {
	case *RPCMessage_Aereq:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Aereq); err != nil {
			return err
		}
	case *RPCMessage_Aereply:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Aereply); err != nil {
			return err
		}
	case *RPCMessage_Rvreq:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Rvreq); err != nil {
			return err
		}
	case *RPCMessage_Rvreply:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Rvreply); err != nil {
			return err
		}
	case *RPCMessage_Isreq:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Isreq); err != nil {
			return err
		}
	case *RPCMessage_Isreply:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Isreply); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RPCMessage.Message has unexpected type %T", x)
	}
	return nil
}

func _RPCMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RPCMessage)
	switch tag {
	case 2: // message.aereq
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AppendEntriesRequest)
		err := b.DecodeMessage(msg)
		m.Message = &RPCMessage_Aereq{msg}
		return true, err
	case 3: // message.aereply
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AppendEntriesReply)
		err := b.DecodeMessage(msg)
		m.Message = &RPCMessage_Aereply{msg}
		return true, err
	case 4: // message.rvreq
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestVoteRequest)
		err := b.DecodeMessage(msg)
		m.Message = &RPCMessage_Rvreq{msg}
		return true, err
	case 5: // message.rvreply
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestVoteReply)
		err := b.DecodeMessage(msg)
		m.Message = &RPCMessage_Rvreply{msg}
		return true, err
	case 6: // message.isreq
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(InstallSnapshotRequest)
		err := b.DecodeMessage(msg)
		m.Message = &RPCMessage_Isreq{msg}
		return true, err
	case 7: // message.isreply
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(InstallSnapshotReply)
		err := b.DecodeMessage(msg)
		m.Message = &RPCMessage_Isreply{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RPCMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RPCMessage)
	// message
	switch x := m.Message.(type) {
	case *RPCMessage_Aereq:
		s := proto.Size(x.Aereq)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RPCMessage_Aereply:
		s := proto.Size(x.Aereply)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RPCMessage_Rvreq:
		s := proto.Size(x.Rvreq)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RPCMessage_Rvreply:
		s := proto.Size(x.Rvreply)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RPCMessage_Isreq:
		s := proto.Size(x.Isreq)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RPCMessage_Isreply:
		s := proto.Size(x.Isreply)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type LogEntry struct {
	Index uint64 `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Term  uint64 `protobuf:"varint,2,opt,name=term" json:"term,omitempty"`
	Key   string `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *LogEntry) Reset()                    { *m = LogEntry{} }
func (m *LogEntry) String() string            { return proto.CompactTextString(m) }
func (*LogEntry) ProtoMessage()               {}
func (*LogEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type AppendEntriesRequest struct {
	Term         uint64      `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	LeaderId     uint64      `protobuf:"varint,2,opt,name=leaderId" json:"leaderId,omitempty"`
	PrevLogIndex uint64      `protobuf:"varint,3,opt,name=prevLogIndex" json:"prevLogIndex,omitempty"`
	PrevLogTerm  uint64      `protobuf:"varint,4,opt,name=prevLogTerm" json:"prevLogTerm,omitempty"`
	Entry        []*LogEntry `protobuf:"bytes,5,rep,name=entry" json:"entry,omitempty"`
	LeaderCommit uint64      `protobuf:"varint,6,opt,name=leaderCommit" json:"leaderCommit,omitempty"`
}

func (m *AppendEntriesRequest) Reset()                    { *m = AppendEntriesRequest{} }
func (m *AppendEntriesRequest) String() string            { return proto.CompactTextString(m) }
func (*AppendEntriesRequest) ProtoMessage()               {}
func (*AppendEntriesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AppendEntriesRequest) GetEntry() []*LogEntry {
	if m != nil {
		return m.Entry
	}
	return nil
}

type AppendEntriesReply struct {
	Term    uint64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *AppendEntriesReply) Reset()                    { *m = AppendEntriesReply{} }
func (m *AppendEntriesReply) String() string            { return proto.CompactTextString(m) }
func (*AppendEntriesReply) ProtoMessage()               {}
func (*AppendEntriesReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type RequestVoteRequest struct {
	Term         uint64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	CandidateId  uint64 `protobuf:"varint,2,opt,name=candidateId" json:"candidateId,omitempty"`
	LastLogIndex uint64 `protobuf:"varint,3,opt,name=lastLogIndex" json:"lastLogIndex,omitempty"`
	LastLogTerm  uint64 `protobuf:"varint,4,opt,name=lastLogTerm" json:"lastLogTerm,omitempty"`
}

func (m *RequestVoteRequest) Reset()                    { *m = RequestVoteRequest{} }
func (m *RequestVoteRequest) String() string            { return proto.CompactTextString(m) }
func (*RequestVoteRequest) ProtoMessage()               {}
func (*RequestVoteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type RequestVoteReply struct {
	Term        uint64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	VoteGranted bool   `protobuf:"varint,2,opt,name=voteGranted" json:"voteGranted,omitempty"`
}

func (m *RequestVoteReply) Reset()                    { *m = RequestVoteReply{} }
func (m *RequestVoteReply) String() string            { return proto.CompactTextString(m) }
func (*RequestVoteReply) ProtoMessage()               {}
func (*RequestVoteReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type InstallSnapshotRequest struct {
	Term              uint64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	LeaderId          uint64 `protobuf:"varint,2,opt,name=leaderId" json:"leaderId,omitempty"`
	LastIncludedIndex uint64 `protobuf:"varint,3,opt,name=lastIncludedIndex" json:"lastIncludedIndex,omitempty"`
	LastIncludedTerm  uint64 `protobuf:"varint,4,opt,name=lastIncludedTerm" json:"lastIncludedTerm,omitempty"`
	Offset            uint64 `protobuf:"varint,5,opt,name=offset" json:"offset,omitempty"`
	Data              []byte `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	Done              bool   `protobuf:"varint,7,opt,name=done" json:"done,omitempty"`
}

func (m *InstallSnapshotRequest) Reset()                    { *m = InstallSnapshotRequest{} }
func (m *InstallSnapshotRequest) String() string            { return proto.CompactTextString(m) }
func (*InstallSnapshotRequest) ProtoMessage()               {}
func (*InstallSnapshotRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type InstallSnapshotReply struct {
	Term uint64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
}

func (m *InstallSnapshotReply) Reset()                    { *m = InstallSnapshotReply{} }
func (m *InstallSnapshotReply) String() string            { return proto.CompactTextString(m) }
func (*InstallSnapshotReply) ProtoMessage()               {}
func (*InstallSnapshotReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func init() {
	proto.RegisterType((*RPCMessage)(nil), "RaftRPC.RPCMessage")
	proto.RegisterType((*LogEntry)(nil), "RaftRPC.LogEntry")
	proto.RegisterType((*AppendEntriesRequest)(nil), "RaftRPC.AppendEntriesRequest")
	proto.RegisterType((*AppendEntriesReply)(nil), "RaftRPC.AppendEntriesReply")
	proto.RegisterType((*RequestVoteRequest)(nil), "RaftRPC.RequestVoteRequest")
	proto.RegisterType((*RequestVoteReply)(nil), "RaftRPC.RequestVoteReply")
	proto.RegisterType((*InstallSnapshotRequest)(nil), "RaftRPC.InstallSnapshotRequest")
	proto.RegisterType((*InstallSnapshotReply)(nil), "RaftRPC.InstallSnapshotReply")
}

func init() { proto.RegisterFile("raftrpc/raft_rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 557 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x54, 0xc1, 0x6a, 0xdb, 0x4c,
	0x10, 0x8e, 0x7e, 0x4b, 0x96, 0x3d, 0xf6, 0xc1, 0x59, 0x8c, 0xf1, 0xdf, 0x50, 0x6a, 0x74, 0xa9,
	0x09, 0xc5, 0x85, 0x84, 0x10, 0x7a, 0x6c, 0x4c, 0xa9, 0x0d, 0x29, 0x84, 0x6d, 0xe9, 0xa9, 0x10,
	0xb6, 0xd2, 0xd8, 0x15, 0x95, 0x25, 0x65, 0x77, 0x6d, 0xea, 0x7b, 0x1f, 0xa0, 0xaf, 0xd7, 0x6b,
	0x9f, 0xa4, 0xec, 0x68, 0x6d, 0x36, 0xb6, 0x72, 0xe8, 0x49, 0x33, 0xdf, 0xce, 0xcc, 0x37, 0xf3,
	0xcd, 0xae, 0x60, 0x20, 0xc5, 0x42, 0xcb, 0x32, 0x7e, 0x6d, 0xbe, 0xf7, 0xb2, 0x8c, 0x27, 0xa5,
	0x2c, 0x74, 0xc1, 0x42, 0x2e, 0x16, 0x9a, 0xdf, 0x4d, 0xa3, 0x9f, 0x0d, 0x00, 0x7e, 0x37, 0xfd,
	0x80, 0x4a, 0x89, 0x25, 0xb2, 0x33, 0x68, 0x2b, 0x94, 0x1b, 0x94, 0xf7, 0x69, 0x32, 0xf4, 0x46,
	0xde, 0xd8, 0xe7, 0xad, 0x0a, 0x98, 0x27, 0xec, 0x0a, 0x02, 0x81, 0x12, 0x1f, 0x86, 0xff, 0x8d,
	0xbc, 0x71, 0xe7, 0xe2, 0xf9, 0xc4, 0x16, 0x99, 0xbc, 0x2d, 0x4b, 0xcc, 0x93, 0x77, 0xb9, 0x96,
	0x29, 0x2a, 0x8e, 0x0f, 0x6b, 0x54, 0x7a, 0x76, 0xc2, 0xab, 0x68, 0x76, 0x0d, 0xa1, 0x31, 0xca,
	0x6c, 0x3b, 0x6c, 0x50, 0xe2, 0xd9, 0x53, 0x89, 0x65, 0xb6, 0x9d, 0x9d, 0xf0, 0x5d, 0x34, 0xbb,
	0x84, 0x40, 0x6e, 0x0c, 0x9f, 0x7f, 0x90, 0x66, 0x29, 0x3e, 0x17, 0x1a, 0x1d, 0x36, 0x8a, 0x65,
	0x57, 0x10, 0x1a, 0xc3, 0xb0, 0x05, 0x94, 0xf6, 0x7f, 0x7d, 0x9a, 0xe5, 0xb2, 0xb1, 0xec, 0x1a,
	0x82, 0x54, 0x19, 0xae, 0x26, 0x25, 0xbd, 0xd8, 0x27, 0xcd, 0x73, 0xa5, 0x45, 0x96, 0x7d, 0xcc,
	0x45, 0xa9, 0xbe, 0x15, 0xda, 0xe1, 0xa3, 0x78, 0xf6, 0x06, 0x42, 0x63, 0x18, 0xbe, 0xf0, 0x40,
	0x96, 0xa3, 0x54, 0xcb, 0x69, 0xe3, 0x6f, 0xda, 0x10, 0xae, 0x2a, 0xdd, 0xa3, 0x2f, 0xd0, 0xba,
	0x2d, 0x96, 0x46, 0x88, 0x2d, 0xeb, 0x43, 0x90, 0xe6, 0x09, 0xfe, 0xb0, 0xfa, 0x57, 0x0e, 0x63,
	0xe0, 0x6b, 0x94, 0x2b, 0xd2, 0xde, 0xe7, 0x64, 0xb3, 0x1e, 0x34, 0xbe, 0x63, 0xa5, 0x6a, 0x9b,
	0x1b, 0xd3, 0xe4, 0x6e, 0x44, 0xb6, 0x46, 0x92, 0xac, 0xcb, 0x2b, 0x27, 0xfa, 0xed, 0x41, 0xbf,
	0x6e, 0x47, 0xfb, 0xa2, 0x9e, 0x53, 0xf4, 0x19, 0xb4, 0x32, 0x14, 0x89, 0xd9, 0xb8, 0x25, 0xdb,
	0xfb, 0x2c, 0x82, 0x6e, 0x29, 0x71, 0x73, 0x5b, 0x2c, 0xe7, 0xd4, 0x61, 0x83, 0xce, 0x1f, 0x61,
	0x6c, 0x04, 0x1d, 0xeb, 0x7f, 0x32, 0xa5, 0x7d, 0x0a, 0x71, 0x21, 0xf6, 0x12, 0x02, 0x34, 0x93,
	0x0e, 0x83, 0x51, 0x63, 0xdc, 0xb9, 0x38, 0xdd, 0x0b, 0xb6, 0x93, 0x80, 0x57, 0xe7, 0x86, 0xae,
	0xa2, 0x9e, 0x16, 0xab, 0x55, 0xaa, 0x69, 0x37, 0x3e, 0x7f, 0x84, 0x45, 0x37, 0xc0, 0x8e, 0x6f,
	0x51, 0xed, 0x60, 0x43, 0x08, 0xd5, 0x3a, 0x8e, 0x51, 0x29, 0x9a, 0xab, 0xc5, 0x77, 0x6e, 0xf4,
	0xcb, 0x03, 0x76, 0x7c, 0xa7, 0x6a, 0x8b, 0x8c, 0xa0, 0x13, 0x8b, 0x3c, 0x49, 0x13, 0xa1, 0x71,
	0x2f, 0x90, 0x0b, 0x51, 0xd3, 0x42, 0xe9, 0x43, 0x8d, 0x5c, 0xcc, 0x54, 0xb1, 0xbe, 0xab, 0x91,
	0x03, 0x45, 0x33, 0xe8, 0x1d, 0x5e, 0xd7, 0xa7, 0xfa, 0xd9, 0x14, 0x1a, 0xdf, 0x4b, 0x91, 0x6b,
	0x4c, 0xec, 0x60, 0x2e, 0x14, 0xfd, 0xf1, 0x60, 0x50, 0x7f, 0x89, 0xff, 0x79, 0xfd, 0xaf, 0xe0,
	0xd4, 0xf4, 0x38, 0xcf, 0xe3, 0x6c, 0x9d, 0x60, 0xe2, 0xce, 0x77, 0x7c, 0xc0, 0xce, 0xa1, 0xe7,
	0x82, 0xce, 0xa4, 0x47, 0x38, 0x1b, 0x40, 0xb3, 0x58, 0x2c, 0x14, 0x6a, 0x7a, 0xb4, 0x3e, 0xb7,
	0x9e, 0xe9, 0x30, 0x11, 0x5a, 0xd0, 0xe6, 0xbb, 0x9c, 0x6c, 0xc2, 0x8a, 0x1c, 0xe9, 0xb9, 0xb5,
	0x38, 0xd9, 0xd1, 0x39, 0xf4, 0xeb, 0x5e, 0x5b, 0xdd, 0x84, 0x5f, 0x9b, 0xf4, 0x0b, 0xbc, 0xfc,
	0x1b, 0x00, 0x00, 0xff, 0xff, 0xfc, 0xe8, 0x9b, 0x69, 0x1c, 0x05, 0x00, 0x00,
}
